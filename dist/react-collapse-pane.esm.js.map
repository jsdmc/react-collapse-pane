{"version":3,"file":"react-collapse-pane.esm.js","sources":["../src/hooks/useMergeClasses.ts","../src/components/Pane/index.tsx","../src/components/Resizer/helpers.tsx","../src/components/Resizer/hooks/useTransition.ts","../src/components/SplitPane/helpers.tsx","../src/components/Resizer/index.tsx","../src/hooks/useEventListener.ts","../src/components/SplitPane/hooks/effects/useDragState.ts","../src/components/SplitPane/hooks/memos/useMinSizes.ts","../src/components/SplitPane/hooks/callbacks/useGetMovedSizes.ts","../src/components/SplitPane/hooks/memos/useIsCollapseReversed.ts","../src/components/SplitPane/hooks/callbacks/useHandleDragFinished.ts","../src/components/SplitPane/hooks/callbacks/useHandleDragStart.ts","../src/components/SplitPane/hooks/memos/useChildPanes.ts","../src/components/SplitPane/hooks/callbacks/useGetCurrentPaneSizes.ts","../src/components/SplitPane/hooks/callbacks/useCollapseSize.ts","../src/components/SplitPane/hooks/callbacks/useUncollapseSize.ts","../src/components/SplitPane/hooks/callbacks/useUpdateCollapsedSizes.ts","../src/components/SplitPane/hooks/memos/useCollapsedSize.ts","../src/components/SplitPane/hooks/callbacks/useRecalculateSizes.ts","../src/components/SplitPane/hooks/useSplitPaneResize.ts","../src/components/SplitPane/hooks/callbacks/useToggleCollapse.ts","../src/components/SplitPane/hooks/callbacks/useGetIsCollapsed.ts","../src/components/SplitPane/hooks/memos/useIsLtr.ts","../src/components/SplitPane/hooks/memos/useCollapsedSizes.ts","../src/components/CollapseButton.tsx","../src/components/SplitPane/hooks/memos/useCollapseOptions.tsx","../src/components/SplitPane/index.tsx"],"sourcesContent":["import { useMemo } from 'react';\r\n\r\nexport const useMergeClasses = (classes: (string | undefined)[]): string =>\r\n  useMemo(() => classes.filter(c => c).join(' '), [classes]);\r\n","import * as React from 'react';\r\nimport { useMergeClasses } from '../../hooks/useMergeClasses';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { SplitType } from '../SplitPane';\r\n\r\nconst DEFAULT_COLLAPSE_TRANSITION_TIMEOUT = 500;\r\nconst verticalCss = css`\r\n  width: 0;\r\n  height: 100%;\r\n`;\r\nconst horizontalCss = css`\r\n  width: 100%;\r\n  height: 0;\r\n`;\r\nconst coverCss = css`\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n`;\r\n\r\ninterface PaneRootProps {\r\n  $isVertical: boolean;\r\n  $shouldAnimate: boolean;\r\n  $timeout: number;\r\n}\r\nconst PaneRoot = styled.div<PaneRootProps>`\r\n  position: relative;\r\n  outline: none;\r\n  border: 0;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  flex-shrink: 1;\r\n  ${props => (props.$isVertical ? verticalCss : horizontalCss)}\r\n  ${props => props.$shouldAnimate && `transition: flex-basis ${props.$timeout}ms ease-in-out`}\r\n`;\r\nconst WidthPreserver = styled.div<{ $isCollapsed: boolean }>`\r\n  ${coverCss}\r\n  ${props =>\r\n    props.$isCollapsed &&\r\n    css`\r\n      * {\r\n        z-index: 0;\r\n      }\r\n      z-index: 0;\r\n    `}\r\n`;\r\n\r\nconst CollapseOverlay = styled.div<{ $timeout: number; $isCollapsed: boolean }>`\r\n  ${props => props.$isCollapsed && coverCss}\r\n  ${props =>\r\n    props.$isCollapsed &&\r\n    css`\r\n      z-index: 1;\r\n    `};\r\n  opacity: ${props => (props.$isCollapsed ? 1 : 0)};\r\n  transition: opacity ${props => props.$timeout}ms ease-in-out;\r\n`;\r\n\r\nexport interface PaneProps {\r\n  size: number;\r\n  minSize: number;\r\n  isVertical: boolean;\r\n  split: SplitType;\r\n  className?: string;\r\n  isCollapsed: boolean;\r\n  forwardRef: React.Ref<HTMLDivElement>;\r\n  collapseOverlayCss?: React.CSSProperties;\r\n  collapsedIndices: number[];\r\n  children: React.ReactNode;\r\n  transitionTimeout: number | undefined;\r\n}\r\nconst UnMemoizedPane = ({\r\n  size,\r\n  minSize,\r\n  isCollapsed,\r\n  collapseOverlayCss = { background: 'rgba(220,220,220, 0.1)' },\r\n  isVertical,\r\n  split,\r\n  className,\r\n  children,\r\n  forwardRef,\r\n  collapsedIndices,\r\n  transitionTimeout,\r\n}: PaneProps) => {\r\n  const classes = useMergeClasses(['Pane', split, className]);\r\n  const timeout = useMemo(() => transitionTimeout ?? DEFAULT_COLLAPSE_TRANSITION_TIMEOUT, [\r\n    transitionTimeout,\r\n  ]);\r\n  const [shouldAnimate, setShouldAnimate] = useState(false);\r\n\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      if (timeout !== 0) {\r\n        setShouldAnimate(true);\r\n        setTimeout(() => setShouldAnimate(false), 500);\r\n      }\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n  }, [setShouldAnimate, collapsedIndices, timeout]);\r\n\r\n  const minStyle = useMemo(() => (isVertical ? { minWidth: minSize } : { minHeight: minSize }), [\r\n    minSize,\r\n    isVertical,\r\n  ]);\r\n  const widthPreserverStyle: React.CSSProperties = isCollapsed\r\n    ? { ...minStyle, userSelect: 'none' }\r\n    : minStyle;\r\n  return (\r\n    <PaneRoot\r\n      $isVertical={isVertical}\r\n      $shouldAnimate={timeout !== 0 && shouldAnimate}\r\n      $timeout={timeout}\r\n      className={classes}\r\n      ref={forwardRef}\r\n      style={{ flexBasis: size }}\r\n    >\r\n      <CollapseOverlay $isCollapsed={isCollapsed} $timeout={timeout} style={collapseOverlayCss} />\r\n      <WidthPreserver $isCollapsed={isCollapsed} style={widthPreserverStyle}>\r\n        {children}\r\n      </WidthPreserver>\r\n    </PaneRoot>\r\n  );\r\n};\r\n\r\nUnMemoizedPane.displayName = 'Pane';\r\nexport const Pane = React.memo(UnMemoizedPane);\r\n","import styled, { css } from 'styled-components';\r\n\r\ntype OrientationProps = {\r\n  $isVertical: boolean;\r\n};\r\nexport const topBottomCss = css`\r\n  top: 0;\r\n  bottom: 0;\r\n`;\r\nconst leftRightCss = css`\r\n  right: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div<OrientationProps>`\r\n  cursor: pointer;\r\n  position: absolute;\r\n`;\r\n\r\ninterface ButtonContainerProps extends OrientationProps {\r\n  $grabberSize: string | null;\r\n  $isLtr: boolean;\r\n}\r\nexport const ButtonContainer = styled.div<ButtonContainerProps>`\r\n  z-index: 3;\r\n  position: absolute;\r\n  overflow: initial;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  ${props => `${props.$isVertical ? 'width' : 'height'}: ${props.$grabberSize}`};\r\n  ${props => (props.$isVertical ? topBottomCss : leftRightCss)}\r\n`;\r\n\r\ninterface GrabberProps extends OrientationProps {\r\n  $isCollapsed: boolean;\r\n  $isLtr: boolean;\r\n}\r\nexport const ResizeGrabber = styled.div<GrabberProps>`\r\n  position: absolute;\r\n  z-index: 3;\r\n  transform: ${props =>\r\n    props.$isVertical ? `translateX(${props.$isLtr ? '-' : ''}50%)` : 'translateY(-50%)'};\r\n  cursor: ${props => !props.$isCollapsed && (props.$isVertical ? 'col-resize' : 'row-resize')};\r\n  ${props => (props.$isVertical ? topBottomCss : leftRightCss)}\r\n`;\r\n\r\nexport const ResizePresentation = styled.div<OrientationProps>`\r\n  z-index: 2;\r\n  position: absolute;\r\n  ${props => (props.$isVertical ? topBottomCss : leftRightCss)}\r\n`;\r\n\r\nexport const getSizeWithUnit = (size: string | number): string =>\r\n  isNaN(size as number) ? size.toString() : `${size}px`;\r\n","import { CollapseOptions, TransitionType } from '../../SplitPane';\nimport { useMemo } from 'react';\nimport { Fade, Grow, Zoom } from '@mui/material';\ntype TransitionComponent = typeof Fade | typeof Grow | typeof Zoom;\nconst transitionComponentMap: {\n  [key in TransitionType]: TransitionComponent;\n} = {\n  fade: Fade,\n  grow: Grow,\n  zoom: Zoom,\n  none: Fade,\n};\n\nexport const useTransition = (collapseOptions?: CollapseOptions) =>\n  useMemo(() => transitionComponentMap[collapseOptions?.buttonTransition ?? 'fade'], [\n    collapseOptions,\n  ]);\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { SplitType } from '.';\r\nimport { Nullable } from '../../types/utilities';\r\n\r\nexport const DEFAULT_MIN_SIZE = 50;\r\n\r\nexport const getMinSize = (index: number, minSizes?: number | number[]): number => {\r\n  if (typeof minSizes === 'number') {\r\n    if (minSizes > 0) {\r\n      return minSizes;\r\n    }\r\n  } else if (minSizes instanceof Array) {\r\n    const value = minSizes[index];\r\n    if (value > 0) {\r\n      return value;\r\n    }\r\n  }\r\n  return DEFAULT_MIN_SIZE;\r\n};\r\n\r\nexport const getRefSize = ({\r\n  ref,\r\n  split,\r\n}: {\r\n  split: SplitType;\r\n  ref: React.RefObject<HTMLDivElement>;\r\n}) => {\r\n  const sizeAttr = split === 'vertical' ? 'width' : 'height';\r\n  return ref.current?.getBoundingClientRect()[sizeAttr] ?? 0;\r\n};\r\n\r\nexport type MoveDetails = {\r\n  sizes: number[];\r\n  index: number;\r\n  offset: number;\r\n  minSizes: number[];\r\n  collapsedIndices: number[];\r\n  collapsedSize: number;\r\n};\r\n/**\r\n * Mutates the original array in a recursive fashion, identifying the current sizes, whether they need to be changed, and whether they need to push the next or previous pane.\r\n */\r\nexport const moveSizes = ({\r\n  index,\r\n  minSizes,\r\n  offset,\r\n  sizes,\r\n  collapsedIndices,\r\n  collapsedSize,\r\n}: MoveDetails): number => {\r\n  //recursion break points\r\n  if (!offset || index < 0 || index + 1 >= sizes.length) {\r\n    return 0;\r\n  }\r\n  const isCollapsed = (idx: number) => collapsedIndices.includes(idx);\r\n  const firstMinSize = isCollapsed(index) ? collapsedSize : getMinSize(index, minSizes);\r\n  const secondMinSize = isCollapsed(index + 1) ? collapsedSize : getMinSize(index + 1, minSizes);\r\n  const firstSize = sizes[index] + offset;\r\n  const secondSize = sizes[index + 1] - offset;\r\n\r\n  if (offset < 0 && firstSize < firstMinSize) {\r\n    const missing = firstSize - firstMinSize;\r\n    const pushedOffset = moveSizes({\r\n      sizes,\r\n      index: index - 1,\r\n      offset: missing,\r\n      minSizes,\r\n      collapsedIndices,\r\n      collapsedSize,\r\n    });\r\n\r\n    offset -= missing - pushedOffset;\r\n  } else if (offset > 0 && secondSize < secondMinSize) {\r\n    const missing = secondMinSize - secondSize;\r\n    const pushedOffset = moveSizes({\r\n      sizes,\r\n      index: index + 1,\r\n      offset: missing,\r\n      minSizes,\r\n      collapsedIndices,\r\n      collapsedSize,\r\n    });\r\n\r\n    offset -= missing - pushedOffset;\r\n  }\r\n  sizes[index] += offset;\r\n  sizes[index + 1] -= offset;\r\n\r\n  return offset;\r\n};\r\n\r\ninterface MoveCollapsedDetails {\r\n  offset: number;\r\n  isReversed: boolean;\r\n  index: number;\r\n  sizes: number[];\r\n  collapsedIndices: number[];\r\n  minSizes: number[];\r\n  collapsedSize: number;\r\n}\r\n/**\r\n * This is only used when a collapse action is invoked.  It's meant to move any collapsed siblings along with the move.\r\n */\r\nexport const moveCollapsedSiblings = ({\r\n  offset,\r\n  isReversed,\r\n  collapsedIndices,\r\n  minSizes,\r\n  sizes,\r\n  index,\r\n  collapsedSize,\r\n}: MoveCollapsedDetails) => {\r\n  if (isReversed ? offset > 0 : offset < 0) {\r\n    for (\r\n      let i = isReversed ? index : index + 1;\r\n      isReversed ? i > 0 : i < sizes.length - 1;\r\n      isReversed ? i-- : i++\r\n    ) {\r\n      if (collapsedIndices.includes(i)) {\r\n        moveSizes({\r\n          sizes,\r\n          index: isReversed ? i - 1 : i,\r\n          offset,\r\n          minSizes,\r\n          collapsedIndices,\r\n          collapsedSize,\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst verticalCss = css`\r\n  left: 0;\r\n  right: 0;\r\n  flex-direction: row;\r\n`;\r\nconst horizontalCss = css`\r\n  bottom: 0;\r\n  top: 0;\r\n  flex-direction: column;\r\n  min-height: 100%;\r\n  width: 100%;\r\n`;\r\nexport const Wrapper = styled.div<{ split: SplitType }>`\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  position: absolute;\r\n  outline: none;\r\n  overflow: hidden;\r\n  ${props => (props.split === 'vertical' ? verticalCss : horizontalCss)}\r\n`;\r\n\r\n/**\r\n * Infers the indices of the collapsed panels from an array of nullable collapse sizes.  If the index is null then it's not collapsed.\r\n */\r\nexport const convertCollapseSizesToIndices = (sizes?: Nullable<number>[]) =>\r\n  sizes?.reduce((prev, cur, idx) => (cur !== null ? [...prev, idx] : [...prev]), [] as number[]) ??\r\n  [];\r\n\r\nexport const addArray = (arr: number[]) => arr.reduce((prev, cur) => prev + cur, 0);\r\n\r\n/**\r\n * Returns a debounced version of a function. Similar to lodash's _.debounce\r\n * @param func the function to be debounced\r\n * @param waitFor the amount of time that must elapse before the debounce expires and the callback is called.\r\n */\r\nexport const debounce = <F extends (...args: any[]) => any>(func: F, waitFor: number) => {\r\n  let timeout: ReturnType<typeof setTimeout> | null = null;\r\n\r\n  const debounced = (...args: Parameters<F>) => {\r\n    if (timeout !== null) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n    }\r\n    timeout = setTimeout(() => func(...args), waitFor);\r\n  };\r\n\r\n  return debounced as (...args: Parameters<F>) => ReturnType<F>;\r\n};\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\nimport { Fade } from '@mui/material';\r\nimport { BeginDragCallback } from '../SplitPane/hooks/effects/useDragState';\r\nimport {\r\n  ButtonContainer,\r\n  ButtonWrapper,\r\n  getSizeWithUnit,\r\n  ResizeGrabber,\r\n  ResizePresentation,\r\n} from './helpers';\r\nimport { useMergeClasses } from '../../hooks/useMergeClasses';\r\nimport { CollapseOptions, ResizerOptions } from '../SplitPane';\r\nimport { useTransition } from './hooks/useTransition';\r\nimport { SplitType } from '../SplitPane';\r\nimport { debounce } from '../SplitPane/helpers';\r\n\r\nconst defaultResizerOptions: Required<ResizerOptions> = {\r\n  grabberSize: '1rem',\r\n  css: { backgroundColor: 'rgba(120, 120, 120, 0.3)' },\r\n  hoverCss: { backgroundColor: 'rgba(120, 120, 120, 0.6)' },\r\n};\r\n\r\nexport interface ResizerProps {\r\n  isVertical: boolean;\r\n  isLtr: boolean;\r\n  split: SplitType;\r\n  className?: string;\r\n  paneIndex: number;\r\n  collapseOptions?: CollapseOptions;\r\n  resizerOptions?: Partial<ResizerOptions>;\r\n  onDragStarted: BeginDragCallback;\r\n  onCollapseToggle: (paneIndex: number) => void;\r\n  isCollapsed: boolean;\r\n}\r\nexport const Resizer = ({\r\n  isVertical,\r\n  split,\r\n  className,\r\n  paneIndex,\r\n  onDragStarted,\r\n  resizerOptions,\r\n  collapseOptions,\r\n  onCollapseToggle,\r\n  isLtr,\r\n  isCollapsed,\r\n}: ResizerProps) => {\r\n  const { grabberSize, css, hoverCss } = { ...defaultResizerOptions, ...resizerOptions };\r\n\r\n  const classes = useMergeClasses(['Resizer', split, className]);\r\n  const grabberSizeWithUnit = useMemo(() => getSizeWithUnit(grabberSize), [grabberSize]);\r\n  const Transition = useTransition(collapseOptions);\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const handleMouseDown = useCallback(\r\n    (event: React.MouseEvent) => {\r\n      event.preventDefault();\r\n      if (!isCollapsed) {\r\n        onDragStarted({ index: paneIndex, position: event });\r\n      }\r\n    },\r\n    [paneIndex, isCollapsed, onDragStarted]\r\n  );\r\n  const handleTouchStart = useCallback(\r\n    (event: React.TouchEvent) => {\r\n      event.preventDefault();\r\n      if (!isCollapsed) {\r\n        onDragStarted({ index: paneIndex, position: event.touches[0] });\r\n      }\r\n    },\r\n    [paneIndex, isCollapsed, onDragStarted]\r\n  );\r\n  const handleButtonClick = useCallback(\r\n    (event: React.MouseEvent) => {\r\n      event.stopPropagation();\r\n      onCollapseToggle(paneIndex);\r\n    },\r\n    [paneIndex, onCollapseToggle]\r\n  );\r\n  const handleButtonMousedown = useCallback((event: React.MouseEvent) => {\r\n    event.stopPropagation();\r\n  }, []);\r\n\r\n  const debouncedSetHovered = useCallback(\r\n    debounce(() => setIsHovered(true), 50),\r\n    [setIsHovered]\r\n  );\r\n  const handleMouseEnterGrabber = useCallback(() => {\r\n    debouncedSetHovered();\r\n  }, [debouncedSetHovered]);\r\n\r\n  const debouncedSetNotHovered = useCallback(\r\n    debounce(() => setIsHovered(false), 100),\r\n    [setIsHovered]\r\n  );\r\n  const handleMouseLeaveGrabber = useCallback(() => debouncedSetNotHovered(), [\r\n    debouncedSetNotHovered,\r\n  ]);\r\n\r\n  const getWidthOrHeight = useCallback(\r\n    (size: string | number) => (isVertical ? { width: size } : { height: size }),\r\n    [isVertical]\r\n  );\r\n  const preButtonFlex = useMemo(\r\n    () => Math.max(100 - (collapseOptions?.buttonPositionOffset ?? 0), 0),\r\n    [collapseOptions]\r\n  );\r\n  const postButtonFlex = useMemo(\r\n    () => Math.max(100 + (collapseOptions?.buttonPositionOffset ?? 0), 0),\r\n    [collapseOptions]\r\n  );\r\n  const isTransition = collapseOptions?.buttonTransition !== 'none';\r\n  const collapseButton = collapseOptions ? (\r\n    <ButtonContainer $isVertical={isVertical} $grabberSize={grabberSizeWithUnit} $isLtr={isLtr}>\r\n      <div style={{ flex: `1 1 ${preButtonFlex}` }} />\r\n      <Transition\r\n        in={isTransition ? isHovered : true}\r\n        timeout={isTransition ? collapseOptions.buttonTransitionTimeout : 0}\r\n        style={{ flex: '0 0 0', position: 'relative' }}\r\n      >\r\n        <ButtonWrapper\r\n          $isVertical={isVertical}\r\n          onClick={handleButtonClick}\r\n          onMouseDown={handleButtonMousedown}\r\n        >\r\n          {isCollapsed ? collapseOptions.afterToggleButton : collapseOptions.beforeToggleButton}\r\n        </ButtonWrapper>\r\n      </Transition>\r\n      <div style={{ flex: `1 1 ${postButtonFlex}` }} />\r\n    </ButtonContainer>\r\n  ) : null;\r\n\r\n  return (\r\n    <div key=\"grabber.root\" style={{ position: 'relative' }}>\r\n      <ResizeGrabber\r\n        key=\"grabber\"\r\n        $isVertical={isVertical}\r\n        $isCollapsed={isCollapsed}\r\n        $isLtr={isLtr}\r\n        style={getWidthOrHeight(grabberSize)}\r\n        role=\"presentation\"\r\n        className={classes}\r\n        onMouseDown={handleMouseDown}\r\n        onTouchStart={handleTouchStart}\r\n        onMouseEnter={handleMouseEnterGrabber}\r\n        onMouseLeave={handleMouseLeaveGrabber}\r\n      >\r\n        {collapseButton}\r\n      </ResizeGrabber>\r\n      <Fade key=\"resize.presentation.fadein\" in={!isHovered}>\r\n        <ResizePresentation $isVertical={isVertical} style={{ ...getWidthOrHeight(1), ...css }} />\r\n      </Fade>\r\n      <Fade key=\"resize.presentation.fadeout\" in={isHovered}>\r\n        <ResizePresentation\r\n          $isVertical={isVertical}\r\n          style={{ ...getWidthOrHeight(1), ...hoverCss }}\r\n        />\r\n      </Fade>\r\n    </div>\r\n  );\r\n};\r\nResizer.displayName = 'Resizer';\r\n","import { useEffect } from 'react';\n\nexport const useEventListener = <K extends keyof WindowEventMap>(\n  type: K,\n  listener?: (this: Window, ev: WindowEventMap[K]) => void\n): void =>\n  useEffect(() => {\n    const abortController = new AbortController();\n    if (!listener) return;\n    window.addEventListener(type, listener);\n    return (): void => {\n      window.removeEventListener(type, listener);\n      abortController.abort();\n    };\n  }, [type, listener]);\n","import * as ReactDOM from 'react-dom';\r\nimport { useEventListener } from '../../../../hooks/useEventListener';\r\nimport { useCallback, useMemo, useState } from 'react';\r\n\r\nexport interface ClientPosition {\r\n  clientX: number;\r\n  clientY: number;\r\n}\r\n\r\nexport interface DragState {\r\n  offset: number;\r\n  index: number;\r\n}\r\nexport type BeginDragCallback = (props: { position: ClientPosition; index: number }) => void;\r\ninterface DragStateHandlers {\r\n  beginDrag: BeginDragCallback;\r\n  dragState: DragState | null;\r\n  onMouseMove?: (event: ClientPosition) => void;\r\n  onTouchMove?: (event: TouchEvent) => void;\r\n  onMouseUp?: () => void;\r\n  onMouseEnter?: (event: MouseEvent) => void;\r\n}\r\n\r\nconst useDragStateHandlers = (\r\n  isVertical: boolean,\r\n  onDragFinished: (dragState: DragState) => void\r\n): DragStateHandlers => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [dragStartPos, setDragStartPos] = useState<number | null>(null);\r\n  const [currentPos, setCurrentPos] = useState<number | null>(null);\r\n  const [draggingIndex, setDraggingIndex] = useState<number | null>(null);\r\n\r\n  const beginDrag: BeginDragCallback = useCallback(\r\n    ({ position, index }: { position: ClientPosition; index: number }): void => {\r\n      const pos = isVertical ? position.clientX : position.clientY;\r\n      ReactDOM.unstable_batchedUpdates(() => {\r\n        setDraggingIndex(index);\r\n        setIsDragging(true);\r\n        setDragStartPos(pos);\r\n        setCurrentPos(pos);\r\n      });\r\n    },\r\n    [isVertical]\r\n  );\r\n\r\n  const dragState: DragState | null = useMemo(() => {\r\n    if (isDragging && currentPos !== null && dragStartPos !== null && draggingIndex !== null) {\r\n      const offset = currentPos - dragStartPos;\r\n      return { offset, index: draggingIndex };\r\n    } else return null;\r\n  }, [currentPos, dragStartPos, draggingIndex, isDragging]);\r\n\r\n  const onMouseUp = useCallback((): void => {\r\n    if (isDragging && dragState) {\r\n      ReactDOM.unstable_batchedUpdates(() => {\r\n        setIsDragging(false);\r\n        onDragFinished(dragState);\r\n      });\r\n    }\r\n  }, [isDragging, dragState, onDragFinished]);\r\n\r\n  const onMouseMove = useCallback(\r\n    (event: ClientPosition): void => {\r\n      if (isDragging) {\r\n        const pos = isVertical ? event.clientX : event.clientY;\r\n        setCurrentPos(pos);\r\n      } else setCurrentPos(null);\r\n    },\r\n    [isDragging, isVertical]\r\n  );\r\n\r\n  const onTouchMove = useCallback(\r\n    (event: TouchEvent): void => {\r\n      if (isDragging) {\r\n        onMouseMove(event.touches[0]);\r\n      }\r\n    },\r\n    [isDragging, onMouseMove]\r\n  );\r\n  const onMouseEnter = useCallback(\r\n    (event: MouseEvent): void => {\r\n      if (isDragging) {\r\n        const isPrimaryPressed = (event.buttons & 1) === 1;\r\n        if (!isPrimaryPressed) {\r\n          onMouseUp();\r\n        }\r\n      }\r\n    },\r\n    [isDragging, onMouseUp]\r\n  );\r\n\r\n  return { beginDrag, dragState, onMouseMove, onTouchMove, onMouseUp, onMouseEnter };\r\n};\r\n\r\ninterface UseDragStateReturn {\r\n  dragState: DragState | null;\r\n  beginDrag: BeginDragCallback;\r\n}\r\nexport const useDragState = (\r\n  isVertical: boolean,\r\n  onDragFinished: (dragState: DragState) => void\r\n): UseDragStateReturn => {\r\n  const {\r\n    beginDrag,\r\n    dragState,\r\n    onMouseMove,\r\n    onTouchMove,\r\n    onMouseUp,\r\n    onMouseEnter,\r\n  } = useDragStateHandlers(isVertical, onDragFinished);\r\n\r\n  useEventListener('mousemove', onMouseMove);\r\n  useEventListener('touchmove', onTouchMove);\r\n  useEventListener('mouseup', onMouseUp);\r\n  useEventListener('mouseenter', onMouseEnter);\r\n\r\n  return { dragState, beginDrag };\r\n};\r\n","import { useMemo } from 'react';\r\nimport { DEFAULT_MIN_SIZE, getMinSize } from '../../helpers';\r\nimport { CollapseOptions } from '../../index';\r\n\r\n/**\r\n * Returns the current actual minimum size of the panel.  This in some cases means the collapsed size.\r\n */\r\nexport const useMinSizes = ({\r\n  minSizes,\r\n  numSizes,\r\n  collapsedIndices,\r\n  collapseOptions,\r\n}: {\r\n  numSizes: number;\r\n  minSizes?: number | number[];\r\n  collapsedIndices: number[];\r\n  collapseOptions?: CollapseOptions;\r\n}): number[] =>\r\n  useMemo(\r\n    () =>\r\n      Array.from({ length: numSizes }).map((_child, idx) =>\r\n        collapsedIndices.includes(idx)\r\n          ? collapseOptions?.collapsedSize ?? DEFAULT_MIN_SIZE\r\n          : getMinSize(idx, minSizes)\r\n      ),\r\n    [numSizes, collapseOptions, collapsedIndices, minSizes]\r\n  );\r\n","import { useCallback } from 'react';\r\nimport { DragState } from '../effects/useDragState';\r\nimport { moveCollapsedSiblings, moveSizes } from '../../helpers';\r\n\r\nexport const useGetMovedSizes = ({\r\n  sizes: originalSizes,\r\n  isLtr,\r\n  minSizes,\r\n  collapsedIndices,\r\n  isReversed,\r\n  collapsedSize,\r\n}: {\r\n  sizes: number[];\r\n  isLtr: boolean;\r\n  minSizes: number[];\r\n  collapsedIndices: number[];\r\n  isReversed: boolean;\r\n  collapsedSize: number;\r\n}) =>\r\n  useCallback(\r\n    (dragState: DragState): number[] => {\r\n      const sizes = [...originalSizes];\r\n      const index = dragState.index;\r\n      const offset = isLtr ? dragState.offset : -dragState.offset;\r\n      moveSizes({\r\n        sizes,\r\n        index,\r\n        offset,\r\n        minSizes,\r\n        collapsedIndices,\r\n        collapsedSize,\r\n      });\r\n      moveCollapsedSiblings({\r\n        collapsedSize,\r\n        sizes,\r\n        minSizes,\r\n        collapsedIndices,\r\n        isReversed,\r\n        index,\r\n        offset,\r\n      });\r\n\r\n      return sizes;\r\n    },\r\n    [collapsedIndices, collapsedSize, isLtr, isReversed, minSizes, originalSizes]\r\n  );\r\n","import { useMemo } from 'react';\r\nimport { CollapseOptions } from '../../index';\r\n\r\nexport const isCollapseDirectionReversed = (\r\n  collapseOptions?: Partial<CollapseOptions> | boolean\r\n): boolean => {\r\n  if (typeof collapseOptions === 'boolean') return false;\r\n  return collapseOptions?.collapseDirection\r\n    ? ['right', 'down'].includes(collapseOptions.collapseDirection)\r\n    : false;\r\n};\r\n\r\nexport const useIsCollapseReversed = (collapseOptions?: Partial<CollapseOptions> | boolean) =>\r\n  useMemo(() => isCollapseDirectionReversed(collapseOptions), [collapseOptions]);\r\n","import React, { useCallback } from 'react';\r\nimport { SplitPaneHooks } from '../..';\r\n\r\n/**\r\n * called at the end of a drag, sets the final size as well as runs the callback hook\r\n */\r\nexport const useHandleDragFinished = ({\r\n  setSizes,\r\n  hooks,\r\n  movedSizes,\r\n}: {\r\n  children: React.ReactChild[];\r\n  setSizes: React.Dispatch<React.SetStateAction<number[]>>;\r\n  movedSizes: number[];\r\n  hooks?: SplitPaneHooks;\r\n}) =>\r\n  useCallback(() => {\r\n    setSizes(movedSizes);\r\n    hooks?.onSaveSizes?.(movedSizes);\r\n  }, [movedSizes, hooks, setSizes]);\r\n","import { useCallback } from 'react';\r\nimport { BeginDragCallback, ClientPosition } from '../effects/useDragState';\r\nimport { SplitPaneHooks } from '../..';\r\n\r\n/**\r\n * Callback that starts the drag process and called at the beginning of the dragging.\r\n */\r\nexport const useHandleDragStart = ({\r\n  isReversed,\r\n  hooks,\r\n  beginDrag,\r\n}: {\r\n  isReversed: boolean;\r\n  hooks?: SplitPaneHooks;\r\n  beginDrag: BeginDragCallback;\r\n}) =>\r\n  useCallback(\r\n    ({ index, position }: { index: number; position: ClientPosition }): void => {\r\n      hooks?.onDragStarted?.();\r\n      beginDrag({ position, index: isReversed ? index - 1 : index });\r\n    },\r\n    [beginDrag, hooks, isReversed]\r\n  );\r\n","import { useMemo } from 'react';\r\nimport * as React from 'react';\r\nimport { ChildPane } from '../useSplitPaneResize';\r\n\r\n// converts all children nodes into 'childPane' objects that has its ref, key, but not the size yet\r\nexport const useChildPanes = ({\r\n  paneRefs,\r\n  children,\r\n  minSizes,\r\n}: {\r\n  paneRefs: React.MutableRefObject<Map<string, React.RefObject<HTMLDivElement>>>;\r\n  children: React.ReactChild[];\r\n  minSizes: number[];\r\n}) => {\r\n  const childPanes: Omit<ChildPane, 'size'>[] = useMemo(() => {\r\n    const prevPaneRefs = paneRefs.current;\r\n    paneRefs.current = new Map<string, React.RefObject<HTMLDivElement>>();\r\n    return children.map((node, index) => {\r\n      const key = `index.${index}`;\r\n      const ref = prevPaneRefs.get(key) || React.createRef();\r\n      paneRefs.current.set(key, ref);\r\n      return { key, node, ref, minSize: minSizes[index] };\r\n    });\r\n  }, [children, minSizes, paneRefs]);\r\n  return childPanes;\r\n};\r\n","import { useCallback } from 'react';\nimport { getRefSize } from '../../helpers';\nimport { ChildPane } from '../useSplitPaneResize';\nimport { SplitType } from '../..';\n\nexport const useGetCurrentPaneSizes = ({\n  childPanes,\n  split,\n}: {\n  childPanes: Pick<ChildPane, 'ref'>[];\n  split: SplitType;\n}) =>\n  useCallback(() => childPanes.map(({ ref }): number => getRefSize({ split, ref })), [\n    childPanes,\n    split,\n  ]);\n","import React, { useCallback } from 'react';\nimport { moveCollapsedSiblings, moveSizes } from '../../helpers';\nimport * as ReactDOM from 'react-dom';\n\nexport const useCollapseSize = ({\n  isReversed,\n  movedSizes,\n  minSizes,\n  collapsedIndices,\n  setSizes,\n  setMovedSizes,\n  collapsedSize,\n}: {\n  isReversed: boolean;\n  movedSizes: number[];\n  minSizes: number[];\n  collapsedIndices: number[];\n  setSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  setMovedSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  collapsedSize: number;\n}) =>\n  useCallback(\n    ({ size, idx }: { idx: number; size: number }) => {\n      const offset = isReversed ? -(collapsedSize - size) : collapsedSize - size;\n      const index = isReversed ? idx - 1 : idx;\n      const sizes = [...movedSizes];\n      moveSizes({ sizes, index, offset, minSizes, collapsedIndices, collapsedSize });\n      moveCollapsedSiblings({\n        offset,\n        index,\n        isReversed,\n        collapsedIndices,\n        minSizes,\n        sizes,\n        collapsedSize,\n      });\n      ReactDOM.unstable_batchedUpdates(() => {\n        setMovedSizes(sizes);\n        setSizes(sizes);\n      });\n    },\n    [isReversed, collapsedSize, movedSizes, minSizes, collapsedIndices, setMovedSizes, setSizes]\n  );\n","import React, { useCallback } from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { moveSizes } from '../../helpers';\n\nexport const useUncollapseSize = ({\n  isReversed,\n  movedSizes,\n  minSizes,\n  setMovedSizes,\n  setSizes,\n  collapsedSize,\n  collapsedIndices,\n}: {\n  isReversed: boolean;\n  movedSizes: number[];\n  minSizes: number[];\n  setSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  setMovedSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  collapsedSize: number;\n  collapsedIndices: number[];\n}) =>\n  useCallback(\n    ({ size, idx }: { size: number; idx: number }) => {\n      const offset = isReversed ? -(size - 50) : size - 50;\n      const index = isReversed ? idx - 1 : idx;\n      const newSizes = [...movedSizes];\n      moveSizes({ sizes: newSizes, index, offset, minSizes, collapsedSize, collapsedIndices });\n      ReactDOM.unstable_batchedUpdates(() => {\n        setMovedSizes(newSizes);\n        setSizes(newSizes);\n      });\n    },\n    [collapsedIndices, collapsedSize, isReversed, minSizes, movedSizes, setMovedSizes, setSizes]\n  );\n","import React, { useCallback } from 'react';\nimport { useCollapseSize } from './useCollapseSize';\nimport { useUncollapseSize } from './useUncollapseSize';\nimport { SplitPaneHooks } from '../..';\nimport { Nullable } from '../../../../types/utilities';\n\nexport const useUpdateCollapsedSizes = ({\n  movedSizes,\n  setCollapsedSizes,\n  collapsedSizes,\n  collapseSize,\n  sizes,\n  hooks,\n  unCollapseSize,\n}: {\n  movedSizes: number[];\n  collapsedSizes: Nullable<number>[];\n  sizes: number[];\n  collapseSize: ReturnType<typeof useCollapseSize>;\n  unCollapseSize: ReturnType<typeof useUncollapseSize>;\n  setCollapsedSizes: React.Dispatch<React.SetStateAction<Nullable<number>[]>>;\n  hooks?: SplitPaneHooks;\n}) =>\n  useCallback(\n    (indices: number[]) => {\n      setCollapsedSizes(\n        collapsedSizes.map((size, idx) => {\n          const isCollapsed = indices.includes(idx);\n          if (isCollapsed && size === null) {\n            collapseSize({ size: sizes[idx], idx });\n            hooks?.onChange?.(sizes);\n            return movedSizes[idx]; // when collapsed store current size\n          }\n          if (!isCollapsed && size !== null) {\n            unCollapseSize({ idx, size }); // when un-collapsed clear size\n            hooks?.onChange?.(sizes);\n            return null;\n          }\n          return size;\n        })\n      );\n    },\n    [collapseSize, collapsedSizes, hooks, movedSizes, setCollapsedSizes, sizes, unCollapseSize]\n  );\n","import { useMemo } from 'react';\nimport { CollapseOptions } from '../../index';\nexport const DEFAULT_COLLAPSE_SIZE = 50;\n\nexport const useCollapsedSize = ({ collapseOptions }: { collapseOptions?: CollapseOptions }) =>\n  useMemo(() => collapseOptions?.collapsedSize ?? DEFAULT_COLLAPSE_SIZE, [collapseOptions]);\n","import { addArray } from '../../helpers';\nimport React, { useCallback } from 'react';\n\nexport const useRecalculateSizes = ({\n  getCurrentPaneSizes,\n  collapsedSize,\n  collapsedIndices,\n  setMovedSizes,\n  setSizes,\n}: {\n  getCurrentPaneSizes: () => number[];\n  collapsedIndices: number[];\n  collapsedSize: number;\n  originalMinSizes: number | number[] | undefined;\n  minSizes: number[];\n  setMovedSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  setSizes: React.Dispatch<React.SetStateAction<number[]>>;\n}) =>\n  useCallback(\n    (initialSizes?: number[]) => {\n      const curSizes = getCurrentPaneSizes();\n      const ratio =\n        initialSizes && initialSizes.length > 0 ? addArray(curSizes) / addArray(initialSizes) : 1;\n      const initialRatioSizes = initialSizes ? initialSizes.map(size => size * ratio) : curSizes;\n      const adjustedSizes = initialRatioSizes.map((size, idx) => {\n        if (collapsedIndices.includes(idx)) {\n          return collapsedSize;\n        }\n        if (collapsedIndices.includes(idx - 1)) {\n          const totalPrevSizeToAdd = addArray(\n            collapsedIndices\n              .filter((_collapsedIdx, index) => index <= idx)\n              .map((_i, index) => initialRatioSizes[index] - collapsedSize)\n          );\n          return size + totalPrevSizeToAdd;\n        }\n        return size;\n      });\n      setMovedSizes(adjustedSizes);\n      setSizes(adjustedSizes);\n    },\n    [collapsedIndices, collapsedSize, getCurrentPaneSizes, setMovedSizes, setSizes]\n  );\n","import * as React from 'react';\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { SplitPaneProps, CollapseOptions } from '..';\r\nimport { useDragState, BeginDragCallback } from './effects/useDragState';\r\nimport { useMinSizes } from './memos/useMinSizes';\r\nimport { useGetMovedSizes } from './callbacks/useGetMovedSizes';\r\nimport { useIsCollapseReversed } from './memos/useIsCollapseReversed';\r\nimport { useHandleDragFinished } from './callbacks/useHandleDragFinished';\r\nimport { useHandleDragStart } from './callbacks/useHandleDragStart';\r\nimport { useChildPanes } from './memos/useChildPanes';\r\nimport { useGetCurrentPaneSizes } from './callbacks/useGetCurrentPaneSizes';\r\nimport { useCollapseSize } from './callbacks/useCollapseSize';\r\nimport { useUncollapseSize } from './callbacks/useUncollapseSize';\r\nimport { useUpdateCollapsedSizes } from './callbacks/useUpdateCollapsedSizes';\r\nimport { useCollapsedSize } from './memos/useCollapsedSize';\r\nimport { debounce } from '../helpers';\r\nimport { useRecalculateSizes } from './callbacks/useRecalculateSizes';\r\nimport { useEventListener } from '../../../hooks/useEventListener';\r\nimport { Nullable } from '../../../types/utilities';\r\n\r\nexport interface ChildPane {\r\n  node: React.ReactChild;\r\n  ref: React.RefObject<HTMLDivElement>;\r\n  key: string;\r\n  size: number;\r\n}\r\ninterface SplitPaneResizeReturns {\r\n  childPanes: ChildPane[];\r\n  resizingIndex: Nullable<number>;\r\n  handleDragStart: BeginDragCallback;\r\n}\r\n\r\ninterface SplitPaneResizeOptions\r\n  extends Pick<SplitPaneProps, 'split' | 'initialSizes' | 'hooks' | 'collapsedSizes' | 'minSizes'> {\r\n  collapsedIndices: number[];\r\n  isLtr: boolean;\r\n  collapseOptions?: CollapseOptions;\r\n  children: React.ReactChild[];\r\n  isVertical: boolean;\r\n}\r\n\r\n/**\r\n * Manages the dragging, size calculation, collapse calculation, and general state management of the panes.  It propogates the results of its complex calculations into the `childPanes` which are used by the rest of the \"dumb\" react components that just take all of them and render them\r\n */\r\nexport const useSplitPaneResize = (options: SplitPaneResizeOptions): SplitPaneResizeReturns => {\r\n  const {\r\n    children: originalChildren,\r\n    split,\r\n    initialSizes: originalDefaults,\r\n    minSizes: originalMinSizes,\r\n    hooks,\r\n    collapsedIndices,\r\n    collapsedSizes: originalCollapsedSizes,\r\n    collapseOptions,\r\n    isVertical,\r\n    isLtr,\r\n  } = options;\r\n\r\n  const children = !Array.isArray(originalChildren) ? [originalChildren] : originalChildren;\r\n  // VALUES: const values used throughout the different logic\r\n  const paneRefs = useRef(new Map<string, React.RefObject<HTMLDivElement>>());\r\n\r\n  const minSizes = useMinSizes({\r\n    minSizes: originalMinSizes,\r\n    numSizes: children.length,\r\n    collapseOptions,\r\n    collapsedIndices,\r\n  });\r\n  const collapsedSize = useCollapsedSize({ collapseOptions });\r\n  const childPanes = useChildPanes({ minSizes, children, paneRefs });\r\n  const isReversed = useIsCollapseReversed(collapseOptions);\r\n  const initialSizes = useMemo(() => children.map((_c, idx) => originalDefaults?.[idx] ?? 1), [\r\n    children,\r\n    originalDefaults,\r\n  ]);\r\n\r\n  // STATE: a map keeping track of all of the pane sizes\r\n  const [sizes, setSizes] = useState<number[]>(initialSizes);\r\n  const [movedSizes, setMovedSizes] = useState<number[]>(sizes);\r\n  const [collapsedSizes, setCollapsedSizes] = useState<Nullable<number>[]>(\r\n    originalCollapsedSizes ?? new Array(children.length).fill(null)\r\n  );\r\n  // CALLBACKS  callback functions used throughout. all functions are memoized by useCallback\r\n  const getMovedSizes = useGetMovedSizes({\r\n    minSizes,\r\n    sizes,\r\n    isLtr,\r\n    collapsedSize,\r\n    collapsedIndices,\r\n    isReversed,\r\n  });\r\n  const getCurrentPaneSizes = useGetCurrentPaneSizes({ childPanes, split });\r\n  const handleDragFinished = useHandleDragFinished({ movedSizes, children, hooks, setSizes });\r\n  const recalculateSizes = useRecalculateSizes({\r\n    setMovedSizes,\r\n    minSizes,\r\n    collapsedIndices,\r\n    collapsedSize,\r\n    getCurrentPaneSizes,\r\n    setSizes,\r\n    originalMinSizes,\r\n  });\r\n\r\n  // STATE: if dragging, contains which pane is dragging and what the offset is.  If not dragging then null\r\n  const { dragState, beginDrag } = useDragState(isVertical, handleDragFinished);\r\n\r\n  const collapseSize = useCollapseSize({\r\n    setMovedSizes,\r\n    setSizes,\r\n    minSizes,\r\n    movedSizes,\r\n    isReversed,\r\n    collapsedIndices,\r\n    collapsedSize,\r\n  });\r\n  const unCollapseSize = useUncollapseSize({\r\n    isReversed,\r\n    movedSizes,\r\n    minSizes,\r\n    setMovedSizes,\r\n    setSizes,\r\n    collapsedSize,\r\n    collapsedIndices,\r\n  });\r\n  const updateCollapsedSizes = useUpdateCollapsedSizes({\r\n    sizes,\r\n    collapsedSizes,\r\n    setCollapsedSizes,\r\n    movedSizes,\r\n    collapseSize,\r\n    unCollapseSize,\r\n    hooks,\r\n  });\r\n\r\n  // EFFECTS: manage updates and calculations based on dependency changes for states that are interacted with by multiple functions\r\n  useEffect(() => {\r\n    if (dragState !== null) setMovedSizes(getMovedSizes(dragState));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dragState]);\r\n  useEffect(() => {\r\n    if (dragState !== null) hooks?.onChange?.(movedSizes);\r\n  }, [dragState, movedSizes, hooks]);\r\n  useEffect(() => {\r\n    hooks?.onCollapse?.(collapsedSizes);\r\n  }, [collapsedSizes, hooks]);\r\n  useEffect(() => {\r\n    updateCollapsedSizes(collapsedIndices);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [collapsedIndices]);\r\n  // recalculate initial sizes on window size change to maintain min sizes\r\n\r\n  const resetSizes = useCallback(\r\n    debounce(() => recalculateSizes(), 100),\r\n    [recalculateSizes]\r\n  );\r\n  useEventListener('resize', resetSizes);\r\n  useEffect(\r\n    () => recalculateSizes(initialSizes),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [initialSizes]\r\n  );\r\n  //populates the sizes of all the initially populated childPanes, adjust sizes based on collapsed state\r\n  const childPanesWithSizes: ChildPane[] = useMemo(\r\n    () =>\r\n      childPanes.map((child, index) => {\r\n        return { ...child, size: movedSizes[index] };\r\n      }),\r\n    [childPanes, movedSizes]\r\n  );\r\n\r\n  const handleDragStart = useHandleDragStart({ isReversed, hooks, beginDrag });\r\n  return {\r\n    childPanes: childPanesWithSizes,\r\n    resizingIndex: dragState?.index ?? null,\r\n    handleDragStart,\r\n  };\r\n};\r\n","import React, { useCallback } from 'react';\n\nexport const useToggleCollapse = ({\n  collapsedIndices,\n  setCollapsed,\n}: {\n  collapsedIndices: number[];\n  setCollapsed: React.Dispatch<React.SetStateAction<number[]>>;\n}) =>\n  useCallback(\n    (index: number) => {\n      collapsedIndices.includes(index)\n        ? setCollapsed(collapsedIndices.filter(i => i !== index))\n        : setCollapsed([...collapsedIndices, index]);\n    },\n    [collapsedIndices, setCollapsed]\n  );\n","import { useCallback } from 'react';\n\nexport const useGetIsPaneCollapsed = ({ collapsedIndices }: { collapsedIndices: number[] }) =>\n  useCallback(\n    (paneIndex: number) =>\n      collapsedIndices.length > 0 ? collapsedIndices.includes(paneIndex) : false,\n    [collapsedIndices]\n  );\n","import { useMemo } from 'react';\r\nimport { Direction, SplitType } from '../../index';\r\n\r\nexport const useIsLtr = ({ split, dir }: { dir?: Direction; split: SplitType }) =>\r\n  useMemo(() => (split === 'vertical' ? dir !== 'rtl' : true), [split, dir]);\r\n","import { useMemo } from 'react';\r\nimport { SplitPaneProps } from '../../index';\r\n\r\nexport const useCollapsedSizes = ({\r\n  collapsedSizes,\r\n  children,\r\n  collapse,\r\n}: Pick<SplitPaneProps, 'collapsedSizes' | 'children' | 'collapse'>) =>\r\n  useMemo(\r\n    () =>\r\n      collapsedSizes?.length === children.length && !!collapse\r\n        ? collapsedSizes\r\n        : new Array(children.length).fill(null),\r\n    [children.length, collapse, collapsedSizes]\r\n  );\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.div`\r\n  width: 1.8rem;\r\n  height: 1.8rem;\r\n  border-radius: 300px;\r\n  background: #0092d1;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  text-align: center;\r\n  color: white;\r\n  border: 2px rgba(200, 200, 200, 0.5) solid;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  svg {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nenum Direction {\r\n  left,\r\n  right,\r\n  up,\r\n  down,\r\n}\r\n\r\nconst paths: { [key in Direction]: string } = {\r\n  [Direction.left]: 'M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z',\r\n  [Direction.right]: 'M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z',\r\n  [Direction.up]: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z',\r\n  [Direction.down]: 'M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z',\r\n};\r\n\r\ninterface IconProps extends React.SVGProps<SVGSVGElement> {\r\n  dir: Direction;\r\n}\r\n\r\nconst Icon: React.FC<IconProps> = props => (\r\n  <svg {...props} focusable=\"false\" fill=\"white\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\r\n    <path d={paths[props.dir]} />\r\n  </svg>\r\n);\r\n\r\ninterface CollapseButtonProps {\r\n  isLtr: boolean;\r\n  isVertical: boolean;\r\n  isBefore: boolean;\r\n  isReversed: boolean;\r\n}\r\nexport const CollapseButton: React.FC<CollapseButtonProps> = props => {\r\n  const dirs: Direction[] = props.isVertical\r\n    ? [Direction.left, Direction.right]\r\n    : [Direction.up, Direction.down];\r\n  const [a, b] = props.isReversed ? dirs.reverse() : dirs;\r\n  const dir: Direction = props.isBefore ? (props.isLtr ? a : b) : props.isLtr ? b : a;\r\n  return (\r\n    <Button>\r\n      <Icon dir={dir} />\r\n    </Button>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { CollapseOptions } from '../../index';\r\nimport { CollapseButton } from '../../../CollapseButton';\r\n\r\nconst getDefault = (props: {\r\n  isVertical: boolean;\r\n  isLtr: boolean;\r\n  isReversed: boolean;\r\n}): CollapseOptions => ({\r\n  beforeToggleButton: <CollapseButton {...props} isBefore={true} />,\r\n  afterToggleButton: <CollapseButton {...props} isBefore={false} />,\r\n  collapseDirection: props.isVertical ? 'left' : 'up',\r\n  overlayCss: { backgroundColor: 'rgba(0, 0, 0, 0.4)' },\r\n  buttonTransitionTimeout: 200,\r\n  buttonTransition: 'grow',\r\n  collapsedSize: 50,\r\n  collapseTransitionTimeout: 500,\r\n  buttonPositionOffset: 0,\r\n});\r\n\r\n/**\r\n * function that returns a set of valid collapseOptions from uncertain input.\r\n */\r\nexport const useCollapseOptions = ({\r\n  originalValue,\r\n  ...orientationDetails\r\n}: {\r\n  originalValue: Partial<CollapseOptions> | undefined | boolean;\r\n  isVertical: boolean;\r\n  isLtr: boolean;\r\n  isReversed: boolean;\r\n}): Required<CollapseOptions> | undefined => {\r\n  if (originalValue === undefined || originalValue === false) return undefined;\r\n  if (originalValue === true) return getDefault(orientationDetails);\r\n  return { ...getDefault(orientationDetails), ...originalValue };\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Pane } from '../Pane';\r\nimport { Resizer } from '../Resizer';\r\nimport { useSplitPaneResize } from './hooks/useSplitPaneResize';\r\nimport { convertCollapseSizesToIndices, getMinSize, Wrapper } from './helpers';\r\nimport { useMergeClasses } from '../../hooks/useMergeClasses';\r\nimport { useIsCollapseReversed } from './hooks/memos/useIsCollapseReversed';\r\nimport { useToggleCollapse } from './hooks/callbacks/useToggleCollapse';\r\nimport { useGetIsPaneCollapsed } from './hooks/callbacks/useGetIsCollapsed';\r\nimport { useIsLtr } from './hooks/memos/useIsLtr';\r\nimport { useCollapsedSizes } from './hooks/memos/useCollapsedSizes';\r\nimport { Nullable } from '../../types/utilities';\r\nimport { useCollapseOptions } from './hooks/memos/useCollapseOptions';\r\n\r\n// String Unions\r\nexport type SplitType = 'horizontal' | 'vertical';\r\nexport type Direction = 'ltr' | 'rtl';\r\nexport type TransitionType = 'fade' | 'grow' | 'zoom' | 'none';\r\nexport type CollapseDirection = 'left' | 'right' | 'up' | 'down';\r\n\r\nexport type SplitPaneHooks = {\r\n  onDragStarted?: () => void;\r\n  onChange?: (sizes: number[]) => void;\r\n  onSaveSizes?: (sizes: number[]) => void;\r\n  onCollapse?: (collapsedSizes: Nullable<number>[]) => void;\r\n};\r\nexport interface CollapseOptions {\r\n  beforeToggleButton: React.ReactElement;\r\n  afterToggleButton: React.ReactElement;\r\n  buttonTransition: TransitionType;\r\n  buttonTransitionTimeout: number;\r\n  buttonPositionOffset: number;\r\n  collapseDirection: CollapseDirection;\r\n  collapseTransitionTimeout: number;\r\n  collapsedSize: number;\r\n  overlayCss: React.CSSProperties;\r\n}\r\nexport interface ResizerOptions {\r\n  css?: React.CSSProperties;\r\n  hoverCss?: React.CSSProperties;\r\n  grabberSize?: number | string;\r\n}\r\n\r\nexport interface SplitPaneProps {\r\n  split: SplitType;\r\n  collapse?: boolean | Partial<CollapseOptions>;\r\n\r\n  dir?: Direction;\r\n  className?: string;\r\n\r\n  initialSizes?: number[];\r\n  minSizes?: number | number[];\r\n  collapsedSizes?: Nullable<number>[];\r\n\r\n  hooks?: SplitPaneHooks;\r\n  resizerOptions?: ResizerOptions;\r\n\r\n  children: React.ReactChild[];\r\n}\r\n\r\nexport const SplitPane: React.FC<SplitPaneProps> = props => {\r\n  const collapsedSizes = useCollapsedSizes(props);\r\n  const isLtr = useIsLtr(props);\r\n  const isVertical = props.split === 'vertical';\r\n  const isReversed = useIsCollapseReversed(props.collapse);\r\n\r\n  const collapseOptions = useCollapseOptions({\r\n    isVertical,\r\n    isLtr,\r\n    originalValue: props.collapse,\r\n    isReversed,\r\n  });\r\n\r\n  const updatedCollapsedIndices = convertCollapseSizesToIndices(collapsedSizes);\r\n\r\n  const [collapsedIndices, setCollapsed] = useState<number[]>(updatedCollapsedIndices);\r\n\r\n  useEffect(() => {\r\n    setCollapsed(updatedCollapsedIndices);\r\n  }, [updatedCollapsedIndices]);\r\n\r\n  const { childPanes, handleDragStart, resizingIndex } = useSplitPaneResize({\r\n    ...props,\r\n    isLtr,\r\n    isVertical,\r\n    collapsedIndices,\r\n    collapsedSizes,\r\n    collapseOptions,\r\n  });\r\n\r\n  const splitPaneClass = useMergeClasses(['SplitPane', props.split, props.className]);\r\n  const resizingClass = useMergeClasses(['Resizing', props.className]);\r\n\r\n  const toggleCollapse = useToggleCollapse({ setCollapsed, collapsedIndices });\r\n  const getIsPaneCollapsed = useGetIsPaneCollapsed({ collapsedIndices });\r\n\r\n  if (childPanes.length <= 1) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      console.error(\r\n        '[react-collapse-pane] - You must have more than one non-null child inside the SplitPane component.  Even though SplitPane does not crash, you should resolve this error.'\r\n      );\r\n    }\r\n    return <>{props.children}</>;\r\n  }\r\n\r\n  // stacks the children and places a resizer in between each of them. Each resizer has the same index as the pane that it controls.\r\n  const entries = childPanes.map((pane, paneIndex) => {\r\n    const resizerPaneIndex = isReversed ? paneIndex : paneIndex - 1;\r\n    return (\r\n      <React.Fragment key={paneIndex}>\r\n        {paneIndex - 1 >= 0 ? (\r\n          <Resizer\r\n            key={`resizer.${resizerPaneIndex}`}\r\n            isCollapsed={getIsPaneCollapsed(resizerPaneIndex)}\r\n            isVertical={isVertical}\r\n            isLtr={isLtr}\r\n            split={props.split}\r\n            className={resizingIndex === resizerPaneIndex ? resizingClass : props.className}\r\n            paneIndex={resizerPaneIndex}\r\n            resizerOptions={props.resizerOptions}\r\n            collapseOptions={collapseOptions}\r\n            onDragStarted={handleDragStart}\r\n            onCollapseToggle={toggleCollapse}\r\n          />\r\n        ) : null}\r\n        <Pane\r\n          key={`pane.${paneIndex}`}\r\n          forwardRef={pane.ref}\r\n          size={pane.size}\r\n          isCollapsed={getIsPaneCollapsed(paneIndex)}\r\n          collapsedIndices={collapsedIndices}\r\n          split={props.split}\r\n          isVertical={isVertical}\r\n          minSize={getMinSize(paneIndex, props.minSizes)}\r\n          className={props.className}\r\n          transitionTimeout={collapseOptions?.collapseTransitionTimeout}\r\n          collapseOverlayCss={collapseOptions?.overlayCss}\r\n        >\r\n          {pane.node}\r\n        </Pane>\r\n      </React.Fragment>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Wrapper key=\"splitpanewrapper\" className={splitPaneClass} split={props.split}>\r\n      {entries}\r\n    </Wrapper>\r\n  );\r\n};\r\nSplitPane.displayName = 'SplitPane';\r\n"],"names":["useMergeClasses","classes","useMemo","filter","c","join","DEFAULT_COLLAPSE_TRANSITION_TIMEOUT","verticalCss","css","horizontalCss","coverCss","PaneRoot","styled","div","props","$isVertical","$shouldAnimate","$timeout","WidthPreserver","$isCollapsed","CollapseOverlay","UnMemoizedPane","size","minSize","isCollapsed","collapseOverlayCss","background","isVertical","split","className","children","forwardRef","collapsedIndices","transitionTimeout","timeout","useState","shouldAnimate","setShouldAnimate","didMount","useRef","useEffect","current","setTimeout","minStyle","minWidth","minHeight","widthPreserverStyle","userSelect","React","ref","style","flexBasis","displayName","Pane","topBottomCss","leftRightCss","ButtonWrapper","ButtonContainer","$grabberSize","ResizeGrabber","$isLtr","ResizePresentation","getSizeWithUnit","isNaN","toString","transitionComponentMap","fade","Fade","grow","Grow","zoom","Zoom","none","useTransition","collapseOptions","buttonTransition","DEFAULT_MIN_SIZE","getMinSize","index","minSizes","Array","value","getRefSize","sizeAttr","getBoundingClientRect","moveSizes","offset","sizes","collapsedSize","length","idx","includes","firstMinSize","secondMinSize","firstSize","secondSize","missing","pushedOffset","moveCollapsedSiblings","isReversed","i","Wrapper","convertCollapseSizesToIndices","reduce","prev","cur","addArray","arr","debounce","func","waitFor","debounced","args","clearTimeout","defaultResizerOptions","grabberSize","backgroundColor","hoverCss","Resizer","paneIndex","onDragStarted","resizerOptions","onCollapseToggle","isLtr","grabberSizeWithUnit","Transition","isHovered","setIsHovered","handleMouseDown","useCallback","event","preventDefault","position","handleTouchStart","touches","handleButtonClick","stopPropagation","handleButtonMousedown","debouncedSetHovered","handleMouseEnterGrabber","debouncedSetNotHovered","handleMouseLeaveGrabber","getWidthOrHeight","width","height","preButtonFlex","Math","max","buttonPositionOffset","postButtonFlex","isTransition","collapseButton","flex","buttonTransitionTimeout","onClick","onMouseDown","afterToggleButton","beforeToggleButton","key","role","onTouchStart","onMouseEnter","onMouseLeave","useEventListener","type","listener","abortController","AbortController","window","addEventListener","removeEventListener","abort","useDragStateHandlers","onDragFinished","isDragging","setIsDragging","dragStartPos","setDragStartPos","currentPos","setCurrentPos","draggingIndex","setDraggingIndex","beginDrag","pos","clientX","clientY","ReactDOM","dragState","onMouseUp","onMouseMove","onTouchMove","isPrimaryPressed","buttons","useDragState","useMinSizes","numSizes","from","map","_child","useGetMovedSizes","originalSizes","isCollapseDirectionReversed","collapseDirection","useIsCollapseReversed","useHandleDragFinished","setSizes","hooks","movedSizes","onSaveSizes","useHandleDragStart","useChildPanes","paneRefs","childPanes","prevPaneRefs","Map","node","get","set","useGetCurrentPaneSizes","useCollapseSize","setMovedSizes","useUncollapseSize","newSizes","useUpdateCollapsedSizes","setCollapsedSizes","collapsedSizes","collapseSize","unCollapseSize","indices","onChange","DEFAULT_COLLAPSE_SIZE","useCollapsedSize","useRecalculateSizes","getCurrentPaneSizes","initialSizes","curSizes","ratio","initialRatioSizes","adjustedSizes","totalPrevSizeToAdd","_collapsedIdx","_i","useSplitPaneResize","options","originalChildren","originalDefaults","originalMinSizes","originalCollapsedSizes","isArray","_c","fill","getMovedSizes","handleDragFinished","recalculateSizes","updateCollapsedSizes","onCollapse","resetSizes","childPanesWithSizes","child","handleDragStart","resizingIndex","useToggleCollapse","setCollapsed","useGetIsPaneCollapsed","useIsLtr","dir","useCollapsedSizes","collapse","Button","Direction","paths","left","right","up","down","Icon","focusable","viewBox","d","CollapseButton","dirs","reverse","a","b","isBefore","getDefault","overlayCss","collapseTransitionTimeout","useCollapseOptions","originalValue","orientationDetails","undefined","SplitPane","updatedCollapsedIndices","splitPaneClass","resizingClass","toggleCollapse","getIsPaneCollapsed","process","env","NODE_ENV","console","error","entries","pane","resizerPaneIndex","Fragment"],"mappings":"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"}